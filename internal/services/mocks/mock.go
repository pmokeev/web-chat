// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "pmokeev/web-chat/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorizationService is a mock of AuthorizationService interface.
type MockAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceMockRecorder
}

// MockAuthorizationServiceMockRecorder is the mock recorder for MockAuthorizationService.
type MockAuthorizationServiceMockRecorder struct {
	mock *MockAuthorizationService
}

// NewMockAuthorizationService creates a new mock instance.
func NewMockAuthorizationService(ctrl *gomock.Controller) *MockAuthorizationService {
	mock := &MockAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationService) EXPECT() *MockAuthorizationServiceMockRecorder {
	return m.recorder
}

// ChangeUserPassword mocks base method.
func (m *MockAuthorizationService) ChangeUserPassword(changePasswordForm models.ChangePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", changePasswordForm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockAuthorizationServiceMockRecorder) ChangeUserPassword(changePasswordForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockAuthorizationService)(nil).ChangeUserPassword), changePasswordForm)
}

// GetUserInformation mocks base method.
func (m *MockAuthorizationService) GetUserInformation(JWTTokenString string) (map[string]string, error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInformation", JWTTokenString)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetUserInformation indicates an expected call of GetUserInformation.
func (mr *MockAuthorizationServiceMockRecorder) GetUserInformation(JWTTokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInformation", reflect.TypeOf((*MockAuthorizationService)(nil).GetUserInformation), JWTTokenString)
}

// JWTVerify mocks base method.
func (m *MockAuthorizationService) JWTVerify(JWTTokenString string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTVerify", JWTTokenString)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JWTVerify indicates an expected call of JWTVerify.
func (mr *MockAuthorizationServiceMockRecorder) JWTVerify(JWTTokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTVerify", reflect.TypeOf((*MockAuthorizationService)(nil).JWTVerify), JWTTokenString)
}

// SignIn mocks base method.
func (m *MockAuthorizationService) SignIn(loginForm models.LoginForm) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", loginForm)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthorizationServiceMockRecorder) SignIn(loginForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthorizationService)(nil).SignIn), loginForm)
}

// SignUp mocks base method.
func (m *MockAuthorizationService) SignUp(registerForm models.RegisterForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", registerForm)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthorizationServiceMockRecorder) SignUp(registerForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthorizationService)(nil).SignUp), registerForm)
}
